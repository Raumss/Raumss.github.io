<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Computer Systems: A Programer's Perspective]]></title>
    <url>%2Funcategorized%2FComputer-Systems-A-Programer-s-Perspective.html</url>
    <content type="text"><![CDATA[内容概要Key words Computer System C language Hardware Software Network Compilation 扩展阅读小土刀：CSAPP 读薄]]></content>
      <tags>
        <tag>Computer System</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSAPP]]></title>
    <url>%2Funcategorized%2FCSAPP.html</url>
    <content type="text"><![CDATA[内容要求 条理要清晰，知识点之间的关系要写明白 内容要精要，不能泰国菜啰嗦，铺垫不要过多]]></content>
      <tags>
        <tag>Computer System</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创建自己的博客：Github + Hexo + NexT]]></title>
    <url>%2Ftools%2Fcreate_your_own_blog_with_github_hexo_next.html</url>
    <content type="text"><![CDATA[使用GitHub + NodeJS + Hexo + NexT 主题，搭建一个属于自己的博客网站： GitHub 创建源和配置 安装NodeJS + npm 安装配置Hexo 安装配置Hexo主题NexT 实现自动编译和部署新版本 Hexo 的一些插件探究 准备工作：运行环境： Centos 7.4 NodeJS v8：安装过程状况很多，单独写一篇日志记录 Git + GitHub 前2项就不列举了，直接进入Github 的配置内容 GitHub首先你需要有一个GitHub账号，如果没有，访问GitHub网站注册一个。 创建仓库新建一个名为username.github.io 的仓库，username是你的Github 账号名，使用其他的名称无效，这样你将来的网站地址就是https://username.github.io了。 GitHub 的用户名是唯一的，所以每个用户的网站地址也就是唯一的了。 以前创建Repo 之后，需要进入Repo 的设置选项中，设置GitHub Pages，现在GitHub 会自动检测你的Repo的名称，符合条件就会直接启用GitHub Pages 功能。 Hexo + NexT123$ npm install -g hexo-cli$ cd WorkDir/Hexo$ hexo init 安装Hexo 和NexTHexo 配置导航栏、页眉、页脚配置头像配置、中文支持、时区设置新增图标、新增Menu 菜单Hexo 日志的整理方式，默认使用时间作文路径，然用tags和category分类日志永久链接格式 Hexo 操作新增page、目录、tags 搜索栏本地搜索，依赖的包：12$ cd WorkDir/Hexo$ npm install hexo-generator-searchdb --save NexT 配置NexT 在GitHub 上的源码 主页显示日志列表的时候，会把所有内容都显示完整，需要能够折叠日志内容 Hexo 添加插件浏览量统计SEOgit 插件本地搜索插件 自动发布参考阅读： https://yq.aliyun.com/articles/8609?spm=a2c4e.11153940.blogrightarea8607.20.74bc38a0Fz0qZn http://lotabout.me/2016/Hexo-Auto-Deploy-to-Github/ https://notes.iissnan.com/2016/publishing-github-pages-with-travis-ci/性能优化 参考阅读： https://yq.aliyun.com/articles/8608?spm=a2c4e.11153940.blogrightarea8607.21.74bc38a0Fz0qZn]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>CS</tag>
        <tag>Tools</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基础]]></title>
    <url>%2Flanguages%2FPython-Base.html</url>
    <content type="text"><![CDATA[Python 基础内容 数据类型：int, long, float, string, tuple, 语法成分：变量、常量、语法、语义、异常、函数、模块、类、lambada、表达式、语句 逻辑控制：条件判断和循环语句 递归 以上分类存疑，还需要进一步理解语言才行语言类通用的部分会整理到专门的语言相关的日志，本日志只保留Python 特有的一些知识点 关于Think Python 2E 这本书中讲了很多语言学的东西，还需要再单独归纳出来，放到一个单独的笔记当中； 应该还有很多通用的概念，比如变量、数据类型等等，这些东西都是通用的，其实都是可以去掉的。因为以后熟悉了，都用不到了，不论在哪一种编程语言中都会降到这些内容； 语言之间互相通用的一些概念，可以归纳到编程语言设计的范畴，如果以后接触编译器/解释器活着语言学的内容，可以归纳到一起； 对于通用内容或语言学的内容，使用特定的tag ——general 标记出来 梳理脉络：语言学 -&gt; 编译器/解释器 -&gt; 编程语言 -&gt; Python/C/C++ 笔记最终保存的内容应该只是python 自己特有的内容 The Way of the Programblahh Variables, Expressions, StatementsVariables变量名可以是任意长度，可以包含字母和数字、下划线，但是必须以字母开头。通常变量名都用小写字母，如果给一个变量起了一个非法的名字，interpreter 会报语法错误。 Python 3 的关键词：123456False True Noneclass def lambda yield raisefinally and return continue for while try elif if else or pass break exceptdel import assert global nonlocalnot from with in as is Expressions and StatementsAn expression is a combination of values, variables and operators. A value all by itself is considered an expressioin, and so is a variable, so the following are all legal expressions:123456&gt;&gt;&gt; 4242&gt;&gt;&gt; n 17&gt;&gt;&gt; n + 2542 When you type an expression at the prompt, the interpreter evaluates it, which means that it finds the value of the expression. In this example, n has the value 17 and n+25 has the value 42. A statement is a unit of code that has an effect, like creating a variable or displaying a value. 12n = 17 # assignment statement, gives a value to `n`.print(n) # a print statement that displays the value of `n`. When you tpye a statement, the interpreter executes it , which means that it does whatever the statement says. In general, statements don’t have values. String operations字符串一般来说不能进行输血运输，也就是所谓的加减乘除幂运算一类。但是python 中，字符串可以进行+操作，这个操作是将两个字符串连接起来。12345a = 'apple'b = 'banana'print (a + b)结果是：applebanana 也就是说，字符串类型中+运算符并不是数值类型中的+，而是“字符串连接运算符“，将两个字符串首尾相接。string 类型的+操作，没有数字类型的+操作那样，可以交换操作数的位置，也就是不适用“交换律”。 出自之外，*运算符也可以用在字符串类型上，表示重复左侧字符串n次。需要注意的是，*的左侧，必须是str类型，右侧必须是int类型，不能颠倒，也不能换成其他数据类型，float 也是不可以的。 FunctionsFunction calls 函数定义：parameter、argument、return value 函数调用 In the context of programming, function is a named sequence of statements that performs a computation. When you define a funtion, you specify the name and the sequence of statements. Later, you can “call“ the function by name. Python 也提供方法做数据类型转换。int 函数可以讲数据类型转换成integer，但是不会做“四舍五入”，而是直接砍掉小数部分。123456&gt;&gt;&gt; int(3.9)3&gt;&gt;&gt; int(-2.3)-2&gt;&gt;&gt; int('32')32 float 函数将integer 和string 转换成浮点数。str 函数将argument 转成string 类型。 A module is a file that contains a collection of related functions. Before we use the functions in a module, we have to import it with an import statement. import math, this statement creates a module boject named math. If you display the module, you get some information about it:12&gt;&gt;&gt; math &lt;module 'math' from ...... The module object contains the functions and variables defined in the module. To access one of the functions, you have to specify the name of the module and the name of the function, separated by a dot(also known as a period). This format is called dot notation.12345&gt;&gt;&gt; ratio = signal_powr /niose_power&gt;&gt;&gt; decibels = 10 * math.log10(ratio)&gt;&gt;&gt; radians = 0.7&gt;&gt;&gt; height = math.sin(radians) CompositionOne of the most useful features of programming languages is their ability to take small building blocks and compose them. For example, the argument of a function can be any kind of expression, including arithmetic operators: x = math.sin(degrees / 360.0 * 2 * math.pi). And even function calls: x = math.exp(math.log(x+1)). 几乎任何可以放一个value的地方都可以替换成表达式，赋值语句=左边必须是variable name，表达式放在左边是语法错误。12&gt;&gt;&gt; minutes = hours * 60 # right&gt;&gt;&gt; hours * 60 = minutes # wrong Function DefinitionA function definition specifies the name of a new function and the sequence of statements that run when the function is called. The name of the function is a variable that refers to a function object. A function object is a value you can assign to a variable or pass as an argument.函数对象也是一个“值”，可以赋值给一个变量或者作为实际变量传递给另一个函数。 123def FUNC_NAME (PARAMETER LIST): STATEMENT 1; STATEMENT 2; def 是python 关键词，表示这是一个函数定义； def 后面跟的是函数名，括号() 中的是形参列表（Parameter list）； 函数名的命名规则和变量名一致： 字母、数字、下划线都可以，但不能以数字开头； 不能使用关键词作为函数名； 避免代码中有变量和函数重名； 函数定义的第一行称为header，必须以（:）结尾 其余部分称为body，body部分必须缩进，python 默认一个缩进是4个空格； python 函数定义时候使用def关键词，不需要指定函数（返回）类型； 没有使用{} 包裹函数体，直接将函数体代码缩进，表示当前语句的归属； 函数定义会像其他语句一样被执行，它的作用是生成一个函数对象（function object）； 函数定义体中的代码只有当函数被调用的时候，才会执行； 调用函数前必须已经创建这个函数（函数定义要在函数调用之前）； Flow of execution要确保函数调用前已经被定义，你必须弄清楚代码的执行顺序，也就是”flow of execution“。 程序执行都是从第一行代码开始，逐条往下执行，函数定义也是这样的，但是函数定义体中的代码之后当函数被调用的时候才会执行。 函数调用会让执行流跳转到被调用函数的定义体中，执行完成之后再返回继续往下执行。 当一个函数调用中用到了其他的函数的时候，程序的执行流程就开始变得麻烦了。 Parameters and Arguments比较两者的不同，在Stack Overflow 看到的答案： Argument is often used in the sense of “actual argument” vs. “formal parameter”. The formal parameter is what’s given in the function declaration/definition/prototype, the actual argument is what’s passed when calling the function, an instance of a formal parameter, if you will.That being said, they’re often used interchangably, or depending on language/community. parameter 通常称为“形式参数”，在函数声明/定义的时候用到；argument通常称为“实际参数”在函数调用的时候用到，将值传递给函数定义中的形式参数。 variables and parameters are local, 它们都有自己的作用域。超过这个作用域之外，它们是不存在的。 如果函数调用的时候发生错误，Python会将执行出错的函数名打印出来，并且打印调用这个函数的函数，以及调用“调用这个函数的函数”的函数，直到返回到“main”函数。 12345678Traceback (innermost last): File &quot;test.py&quot;, line 13, in __main__ cat_twice(line1, line2) File &quot;test.py&quot;, line 5, in cat_twice print_twice(cat) File &quot;test.py&quot;, line 9, in print_twice print(cat)NameError: name &apos;cat&apos; is not defined 上面的一系列输出我们称之为traceback，它会告诉你程序执行时候错误发生在哪里 Fruitful Functions and Void Functions那些有返回值的函数，称为“fruitful functions“；相反，没有返回值的，称为“void functions”。 void function 可能会现实一些信息，或者有其它效果，但是不会有返回值。如果将void function 赋值给一个变量，变量的值就是None，是Python中的一个特殊值。 Why Functions 使用函数的形式，将一组有特定功能的语句组合起来，并给它们一个有意义的名字，这样让代码更容易阅读和除错； 函数可以减少重复代码，让程序更小。如果要修改一个功能，只要修改一个函数即可； 将一个很长的应用程序分割成多个函数，这样可以逐个排查函数，最后将他们组合到一起； 设计良好的函数可以供给多个程序使用。一旦写好一个函数，并且已经验证过，就可以重复使用它； DebuggingDebug 是写代码过程中最考验智慧，最有挑战和有趣的部分。 对一些人来说，“编程”和“debug”是一回事。编程就是不断的debug 直到代码可用的过程。 Conditionals and Recursion这一章主要是讲条件语句和递归。 在此之前先讲两个运算符：// （floor division） 和 %（modulus，取余运算符）。 Floor Division and ModulusFloor division （//） 就是将两个数相除，获得的结果向下取整（往小值取）。1234&gt;&gt;&gt; 3.0//21.0&gt;&gt;&gt; -3.0//2-2.0 # 往小了取 Modulus ,%, 取余运算符，就是两个数字相除只保留余数部分：12&gt;&gt;&gt; 105 % 6045 取余运算符可以用来检查一个数字是否可以被另一个数字整除； 取余运算符可以用来获取一个数的小数点后的数字，比如 3.14，使用3.14 * 100 % 100，这样就知道小数点右边的数字是34了； Python3 和Python2 在integers除法运算上的差异：1234567# python2 &gt;&gt;&gt; 3/21# python3&gt;&gt;&gt; 3/21.5 Boolean Expressions 布尔表达式 A boolean expression is an expression that is either true or false. The following examples use the operator ==, which compares two operands and produces True if they are equal and Flase otherwise:12345&gt;&gt;&gt; 5 == 5True&gt;&gt;&gt; 5 == 6False True 和 False 是布尔类型的两个值，它们并不是string。除了==运算符，还有其它的：12345x != y # 不等于x &gt; y # 大于x &lt; y # 小于x &gt;= y # 大于等于x &lt;= y # 小于等于 Logical Operators 逻辑运算符 三个逻辑运算符：and，or，not。1n % 2 == 0 or n % 3 == 0 # n 能被2或者3整除都返回true 严格来说，逻辑运算符的操作数都应该是布尔表达式，但是Python 在这方面没有非常严格，非0值都算True:12&gt;&gt;&gt; 42 and TrueTrue Conditional Execution 条件执行使用条件语句，根据不同的程序环境，执行不同的指令。12if x &gt; 0: print ('x is positive') if 关键词后边的布尔表达式x &gt; 0 被称为条件。如果条件满足，则后边的语句可以执行，如果不满足条件，则不会执行任何操作。 if 语句的结构和function definition 的结构类似：一个header 后面跟一段语句（body）。这种语句，称为复合语句（compound statements）。body 中可以包含任意数量的语句，但是有时候，body中没有语句也非常有用（很多时候是作为尚未进行的代码的占位符），这种情况下，可以直接使用pass 语句，不会执行任何操作：123if x &lt; 0: pass # TODO: need to handle negativevalues! Alternative Execution 选择执行if 语句的第二种形式，就是有两种可能的情况，根据不同条件决定执行哪些语句：1234if x % 2 == 0: print ('x is even')else: print ('x is odd') 这些可选的执行语句被称为分支，因为他们是程序执行流程中的不同的分支。 Chained Conditionals有些时候可能会有3个以上可能性的情况，所以我们需要更多的分支，这时候就可以使用chained conditional（链式条件）了。 123456if x &lt; y: print ('x is less than y.')elif x &gt; y: print ('x is greater than y.')else: print ('x and y are equal.') elif 语句的使用数量是没有限制的。else 语句必须是最后一个可选条件，但是并非必须有一个else语句。123456if choice == 'a': draw_a()elif choice == 'b': draw_b()elif choice == 'c': draw_c() ⚠️ 注意： 以上每种情况都会按照先后顺序进行检查，前一个为false 才会检查下一种情况； 如果有一个条件是true，就执行该条件对应的语句； 即使有多个条件为True，但是也只执行第一个为True 的语句。 Nested Conditionals 嵌套条件一个条件可以嵌套进另一个条件中，前边的例子可以换一种写法：1234567if x == y: print ('x and y are equal')else: if x &lt; y: print ('x is less than y') else: print ('x is greater than y') 嵌套的结构不利于代码的阅读，所以尽量避免这种情况。 逻辑运算符通常可以用来简化嵌套语句（nested conditoinals），例如：123if 0 &lt; x: if x &lt; 10: print ('x 是大于0的个位数') 修改成如下代码：12if x &gt; 0 and x &lt; 10: print ('x 是大于0的个位数') Python 还提供了更加精简的模式：12if 0 &lt; x &lt; 10: print ('x 是大于0的个位数') Recursion 递归一个函数可以调用另一个函数，同样的，一个函数也可以调用自己本身。 123456def countdown(n): if n &lt;= 0: print ('Blastoff!') else: print(n) countdown(n-1) 安装的各种问题CentOS on Raspberry Pi3直接下载源码包，进行编译安装。 首先安装依赖的程序123456789101112131415161718$ yum group install "Development Tools"$ yum install openssl openssl-devel # 通过ssl 获取pip 和setuptools ，这样才能自动安装上setuptools 和pip$ yum install tix tcl-devel tk-devel # tkinter 的依赖$ cd Python-3.4.9# 安装步骤在README 文件中$ ./configure$ make $ make test$ make install....Collecting setuptoolsCollecting pipInstalling collected packages: setuptools, pipSuccessfully installed pip-9.0.1 setuptools-28.8.0# setuptools 和pip 自动安装了 如果不安装openssl，就无法获取setuptools 和pip。 python 源码包的setup 参考文献： 《Think Python 2E》 MIT OCW 6.0001]]></content>
      <categories>
        <category>Languages</category>
      </categories>
      <tags>
        <tag>Languages</tag>
        <tag>todo</tag>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
